<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[TS格式转MP4时PTS的转换]]></title>
    <url>%2Fts-to-mp4.html</url>
    <content type="text"><![CDATA[DTS、PTS DTS（Decoding Time Stamp）：即解码时间戳，这个时间戳的意义在于告诉播放器该在什么时候解码这一帧的数据。 PTS（Presentation Time Stamp）：即显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧的数据。 需要注意的是：虽然 DTS、PTS 是用于指导播放端的行为，但它们是在编码的时候由编码器生成的。 音视频的同步音频视频混合在一起播放，就呈现了我们常常看到的广义的视频。在音视频一起播放的时候，我们通常需要面临一个问题：怎么去同步它们，以免出现画不对声的情况。要实现音视频同步，通常需要选择一个参考时钟，参考时钟上的时间是线性递增的，编码音视频流时依据参考时钟上的时间给每帧数据打上时间戳。在播放时，读取数据帧上的时间戳，同时参考当前参考时钟上的时间来安排播放。这里的说的时间戳就是我们前面说的 PTS。 PTS和DTS的时间基在FFmpeg中，引入了时间基（time_base）的概念，它用来度量时间的。如果把1秒分为25等份，你可以理解就是一把尺，那么每一格表示的就是1/25秒。此时的time_base={1，25}如果你是把1秒分成90000份，每一个刻度就是1/90000秒，此时的time_base={1，90000}。所谓时间基表示的就是每个刻度是多少秒，pts的值就是占多少个时间刻度（占多少个格子）。它的单位不是秒，而是时间刻度。只有pts加上time_base两者同时在一起，才能表达出时间是多少。即当pts=100时，time_base={1, 90000}时，当前帧的播放位置=100*1/90000秒处。 时间基的转换不同的封装格式，time_base是不一样的。供参考的mpegts, mp4, mov和flv四种格式的time_base12345678910111213141516171819ts格式video: 90kaudio: 90k所以video与audio的封装层的timebase是一致的，均为90kmp4格式video: 12800audio: 44100audio及video的封装层timebase不一致，video为128000，audio为44100（与采样率一致）mov格式video: 12800audio: 44100与mp4格式一致flv格式video: 1kaudio: 1kaudio与video的封装层timebase一致 转换实例mpegts转mp4时，因为mp4的video与audio timebase不一致，所以要分别转换。12mp4.video.pts = ts.video.pts * 12800 / 90000;mp4.audio.pts = ts.audio.pts * 8000 / 90000; //8000采样率 反之，mp4转mpegts时12ts.video.pts = mp4.video.pts * 90000 / 12800;ts.audio.pts = mp4.audio.pts * 90000 / 8000; //8000采样率]]></content>
      <categories>
        <category>h264</category>
      </categories>
      <tags>
        <tag>h264</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebRTC 服务器搭建]]></title>
    <url>%2Fwebrtc-server.html</url>
    <content type="text"><![CDATA[环境操作系统： Ubuntu 16.04 64bits 服务器组成AppRTC 房间+Web服务器 https://github.com/webrtc/apprtcCollider 信令服务器，在AppRTC源码里CoTurn coturn打洞+中继服务器Nginx 服务器，用于Web访问代理和Websocket代理。 AppRTC 房间+Web服务器使用python+js语言AppRTC Collider信令服务器采用go语言Coturn 采用C语言 在部署到公网时需要通过Nginx做Web和Websocket的代理连接实际开发：把信令+房间管理 都是写到一个服务器 软件安装注意，本文中apt-get都是用apt的方式，该命令仅在ubuntu16及以上版本支持，两者无大差别，请根据自己系统版本及使用习惯使用。 基础软件1234567891011121314# 安装vimsudo apt install vim# 安装 gitsudo apt install git# 安装JDK# 添加ppa源，并更新源sudo add-apt-repository ppa:openjdk-r/ppa sudo apt update# 安装openjdk 8 sudo apt install openjdk-8-jdkjava -version# openjdk version "1.8.0_265" 创建目录12mkdir ~/webrtccd ~/webrtc 我的webrtc目录为/home/zhangkx/webrtc，后续都是采用该目录。 安装nodejs及相关注意：nodejs 安装10以上版本123456789101112131415161718192021cd ~/webrtcwget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xztar -xvf node-v10.16.0-linux-x64.tar.xzcd node-v10.16.0-linux-x64/ls -al ./bin/# bin目录下应该要有npm和node文件，建立软连接sudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/npm /usr/local/bin/sudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/node /usr/local/bin/# 查看版本号node -v# V10.16.0npm -v# 6.9.0# 进入node-v10.16.0-linux-x64/bin目录下，安装grunt-clicd binsudo npm -g install grunt-clisudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/grunt /usr/local/bin/grunt -version# grunt-cli v1.3.2 也可以通过apt install nodejs方式安装，可能出现版本及依赖不对的问题，所以本文未采用该方式。 安装Python和Python-webtestubuntu16自带python2.712python -V# Python 2.7.12 如果没有则安装1sudo apt install python 安装python-webtest1sudo apt install python-webtest 搭建房间服务器（Room Server）下载apprtc源码1234cd ~/webrtcgit clone https://github.com/webrtc/apprtc.git cd apprtcsudo npm install apprtc下package.json文件，定义了需要安装哪些依赖项，在package.json当前目录执行npm install，安装依赖模块在这个目录的node_modules文件夹下，如果执行npm install -g，为全局安装，所有nodejs都可以用。 修改文件配置防火墙，允许访问8090端口（tcp端口，此端口用于web访问）12# 允许外部访问8090端口（tcp/udp），其他端口类似sudo ufw allow 8090 1.配置文件修改（主要是配置apprtc对应的conturn和collider相关参数）1234567891011121314151617181920212223242526272829303132333435sudo vim ~/webrtc/apprtc/src/app_engine/constants.py# Turn/Stun server override. This allows AppRTC to connect to turn servers# directly rather than retrieving them from an ICE server provider.# ICE_SERVER_OVERRIDE = None ### 这里注释掉# Enable by uncomment below and comment out above, then specify turn and stunICE_SERVER_OVERRIDE = [ &#123; "urls": [ "turn:192.168.3.110:3478?transport=udp", "turn:192.168.3.110:3478?transport=tcp" ], "username": "zhangkx", "credential": "123456" &#125;, &#123; "urls": [ "stun:192.168.3.110:3478" ] &#125;]ICE_SERVER_BASE_URL = 'https:192.168.3.110'ICE_SERVER_URL_TEMPLATE = '%s/v1alpha/iceconfig?key=%s' # 如果iceconfig.php未实现，可用默认配置，但是Android Apk会有问题ICE_SERVER_API_KEY = os.environ.get('ICE_SERVER_API_KEY')# Dictionary keys in the collider instance info constant.WSS_INSTANCE_HOST_KEY = '192.168.3.110:8088' # 信令服务器端口号8088 WSS_INSTANCE_NAME_KEY = 'vm_name'WSS_INSTANCE_ZONE_KEY = 'zone'WSS_INSTANCES = [&#123; WSS_INSTANCE_HOST_KEY: '192.168.3.110:8088', WSS_INSTANCE_NAME_KEY: 'wsserver-std', WSS_INSTANCE_ZONE_KEY: 'us-central1-a' &#125;] 编译123cd ~/webrtc/apprtcsudo npm installsudo grunt build 编译完成之后，会生成out目录，房间服务器编译完成。 安装和配置google app engine12345678910cd ~/webrtc# 下载google_appenginewget https://storage.googleapis.com/appengine-sdks/featured/google_appengine_1.9.40.zipunzip google_appengine_1.9.40.zip#配置环境变量：sudo vim /etc/profile# 在最后添加一行export PATH=$PATH:/home/zhangkx/webrtc/google_appenginesource /etc/profile 运行房间服务器（room server)在目录/home/zhangkx/webrtc/google_appengine目录下找到dev_appserver.py脚本12345# 默认端口是8080，这里我们指定为8090sudo /home/zhangkx/webrtc/google_appengine/dev_appserver.py --host=0.0.0.0 --port=8090 /home/zhangkx/webrtc/apprtc/out/app_engine --skip_sdk_update_check# 若想后台运行，则执行sudo nohup /home/zhangkx/webrtc/google_appengine/dev_appserver.py --host=0.0.0.0 --port=8090 /home/zhangkx/webrtc/apprtc/out/app_engine --skip_sdk_update_check &amp; 因为是为公网、或者局域网其他人提供服务，所以这里 host=0.0.0.0，以避免只监听 127.0.0.1 的状况 在浏览器中访问房间服务器http://192.168.3.110:809012345# 开启控制台新窗口，查看是否成功sudo lsof -i:8090# 输出下列内容COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEpython 5248 root 8u IPv4 83337 0t0 TCP *:8090 (LISTEN) 搭建信令服务器(Collider Server)安装go语言编译器1234apt-get install golang-go# 查看版本号 go version# go version go1.6.2 linux/amd64 复制collider源代码创建go工作目录1234567cd ~/webrtcmkdir -p goworkspace/src#配置环境变量：sudo vim /etc/profile# 在最后添加一行export GOPATH=/home/zhangkx/webrtc/goworkspacesource /etc/profile （此源码在房间服务器源码目录下/home/zhangkx/webrtc/apprtc/src/collider/)1234# 将collider的源码软连接到go的工作目录下ln -s /home/zhangkx/webrtc/apprtc/src/collider/collider $GOPATH/srcln -s /home/zhangkx/webrtc/apprtc/src/collider/collidermain $GOPATH/srcln -s /home/zhangkx/webrtc/apprtc/src/collider/collidertest $GOPATH/src 修改代码1.编辑文件$GOPATH/src/collidermain/main.go，修改房间服务器的地址1var roomSrv = flag.String("room-server", "http://192.168.3.110:8090", "The origin of the room server") 如果不改这句，需要在启动信令服务器的命令中添加-room-server=”http://192.168.3.110:8090&quot; 2.修改SSL证书地址：编辑文件$GOPATH/src/collider/collider.go，修改下面这句：12#/cert/cert.pem与/cert/key.pem改为自己使用的证书地址e = server.ListenAndServeTLS("/cert/cert.pem", "/cert/key.pem") SSL证书生成见后续Nginx配置。 编译信令服务器12345678910111213cd $GOPATH/src# 执行go get collidermain， 会被墙。# 报错: package golang.org/x/net/websocket: unrecognized import path "golang.org/x/net/websocket"# 改为执行sudo mkdir -p $GOPATH/src/golang.org/x/cd $GOPATH/src/golang.org/x/sudo git clone https://github.com/golang/net.git netsudo go install net#编译collidermaincd $GOPATH/srcgo get collidermaingo install collidermain 编译成功后，在$GOPATH下会生成bin和pkg目录。 运行信令服务器配置防火墙，允许访问8089端口（tcp，用于客户端和collider建立websocket信令通信）运行信令服务器（没有生成pcm签名文件的话会报错）123sudo $GOPATH/bin/collidermain -port=8089 -tls=true# 若想后台运行，则执行sudo nohup $GOPATH/bin/collidermain -port=8089 -tls=true &amp; 没有修改main.go的话，需要在命令后面加上room-server参数1sudo $GOPATH/bin/collidermain -port=8089 -tls=true -room-server="http://192.168.3.110:8090" -room-server=”http://192.168.3.110:8090&quot; 实际是连接房间服务器的地址tls=true，上面constants.py不需要修改；tls=false，需要把constants.py中的wss://和https:// 改为ws://和http:// 12345# 开启控制台新窗口，检查是否成功sudo lsof -i:8089#显示COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEcolliderm 5610 root 3u IPv6 92193 0t0 TCP *:8089 (LISTEN) 搭建STUN\TURN服务器安装coturn1234567891011sudo apt install libssl-devsudo apt-get install libevent-devcd ~/webrtcwget http://coturn.net/turnserver/v4.5.0.7/turnserver-4.5.0.7.tar.gztar xfz turnserver-4.5.0.7.tar.gzcd turnserver-4.5.0.7sudo ./configuresudo makesudo make install 进行相关配置（废弃）编辑文件/etc/default/coturn和/etc/turnserver.conf，这两个文件没找到。配置这些文件后，可以使用service coturn start进行启动。我们启动时，使用turnserver命令启动，后面自带参数，就不用配置了。 启动coturn服务器配置防火墙，允许访问3478端口（含tcp和udp，此端口用于nat穿透）123456789101112131415161718# 账号:zhangkx 密码：123456，在apprtc中有配置sudo turnserver -L 0.0.0.0 -a -u zhangkx:123456 -v -f -r nort.gov# 若想后台运行，则执行sudo nohup turnserver -L 0.0.0.0 -a -u zhangkx:123456 -v -f -r nort.gov &amp;# x外网ip,L和E是内网ip# 开启控制台新窗口，查询是否成功sudo lsof -i:3478COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEturnserver 5822 root 40u IPv4 92909 0t0 UDP *:3478turnserver 5822 root 41u IPv4 92910 0t0 UDP *:3478turnserver 5822 root 42u IPv4 92911 0t0 UDP *:3478...turnserver 5822 root 65u IPv4 91553 0t0 TCP *:3478 (LiSTEN)turnserver 5822 root 66u IPv4 96745 0t0 TCP *:3478 (LiSTEN)turnserver 5822 root 67u IPv4 97486 0t0 TCP *:3478 (LiSTEN)... 配置Nginx服务器用来统一 HTTP 对外服务端口，以及最主要的反代 3033 TURN REST API服务注意安装的时候要带ssl 安装Nginx123456789101112131415161718192021cd ~/webrtc# 安装依赖：gcc、g++依赖库sudo apt-get install build-essential libtool# 安装 pcre依赖库（http://www.pcre.org/）sudo apt-get install libpcre3 libpcre3-dev# 安装 zlib依赖库（http://www.zlib.net）sudo apt-get install zlib1g-dev# 安装ssl依赖库sudo apt-get install openssl# 下载nginx 1.15.8版本wget http://nginx.org/download/nginx-1.15.8.tar.gztar xvzf nginx-1.15.8.tar.gzcd nginx-1.15.8/# 配置，一定要支持httpssudo ./configure --with-http_ssl_module # 编译 安装sudo makesudo make install 默认安装目录：/usr/local/nginx启动：sudo /usr/local/nginx/sbin/nginx停止：sudo /usr/local/nginx/sbin/nginx -s stop重新加载配置文件：sudo /usr/local/nginx/sbin/nginx -s reload 配置Nginx (未使用)编辑配置文件/etc/nginx/sites-available/default1234567891011121314151617181920212223242526272829303132333435server &#123; listen 80 default_server; listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html; server_name 192.168.3.110; #添加地址 location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125; ..... .... &#125; 生成SSL证书123456mkdir -p ~/certcd ~/cert# CA私钥openssl genrsa -out key.pem 2048# 自签名证书openssl req -new -x509 -key key.pem -out cert.pem -days 1095 Web代理反向代理apprtc，使之支持https访问，如果http直接访问apprtc，则客户端无法启动视频音频采集（必须得用https访问)即使用http://192.168.3.110:8090，可以打开room server服务器，但是加入房间后，无法启动音视频采集。 配置web服务器123456789101112131415161718192021222324（新建文件）sudo vim /usr/local/nginx/conf/conf.d/apprtc-https-proxy.confupstream roomserver &#123; server 192.168.3.110:8090;&#125;server &#123; listen 443 ssl; ssl_certificate /home/zhangkx/cert/cert.pem; ssl_certificate_key /home/zhangkx/cert/key.pem; charset utf-8; # ip地址或者域名 server_name 192.168.3.110; location / &#123; # 转向代理的地址 proxy_pass http://roomserver$request_uri; proxy_set_header Host $host; &#125;&#125;sudo vim /usr/local/nginx/conf/nginx.conf# 在末尾&#125;之前，添加下行内容，包含文件 include /usr/local/nginx/conf/conf.d/*.conf;&#125; 配置websocket代理ws 不安全的连接 类似httpwss是安全的连接，类似https完整配置文件：/usr/local/nginx/conf/conf.d/apprtc-websocket-proxy.conf123456789101112131415161718192021222324map $http_upgrade $connection_upgrade &#123; default upgrade; '' close;&#125;upstream websocket &#123; server 192.168.3.110:8089;&#125;server &#123; listen 8088 ssl; ssl_certificate /home/zhangkx/cert/cert.pem; ssl_certificate_key /home/zhangkx/cert/key.pem; server_name 192.168.3.110; location /ws &#123; proxy_pass http://websocket; proxy_http_version 1.1; proxy_connect_timeout 4s; #配置点1 proxy_read_timeout 6000s; #配置点2，如果没效，可以考虑这个时间配置长一点 proxy_send_timeout 6000s; #配置点3 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; &#125;&#125; —– 以下未使用 —– 安装php和php-fpmubuntu 16上，php是7.0的12apt-get install php apt-get install php7.0-fpm 编辑配置文件/etc/nginx/sites-available/default123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566upstream roomserver &#123; server 192.168.3.110:8090; &#125; server &#123; listen 80 ; server_name webrtc.olcms.com; return 301 https://$server_name$request_uri; &#125; server &#123; # listen 80 default_server; # listen [::]:80 default_server; # SSL configuration # # listen 443 ssl default_server; # listen [::]:443 ssl default_server; listen 443; # # Note: You should disable gzip for SSL traffic. # See: https://bugs.debian.org/773332 # # Read up on ssl_ciphers to ensure a secure configuration. # See: https://bugs.debian.org/765782 # # Self signed certs generated by the ssl-cert package # Don't use them in a production server! # # include snippets/snakeoil.conf; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.nginx-debian.html index.php; #此处添加index.php server_name webrtc.olcms.com; # location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. # try_files $uri $uri/ =404; # &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # location ~ \.php$ &#123; include snippets/fastcgi-php.conf; # With php7.0-cgi alone: #fastcgi_pass 127.0.0.1:9000; # With php7.0-fpm: fastcgi_pass unix:/run/php/php7.0-fpm.sock; &#125; location / &#123; proxy_pass http://roomserver$request_uri; proxy_set_header Host $host; &#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125; ssl on; ssl_certificate /etc/letsencrypt/live/webrtc.olcms.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/webrtc.olcms.com/privkey.pem; &#125; 编写turn.php文件和iceconfig.php文件，并把文件放到目录/var/www/html/目录下turn.php文件内容1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?php $request_username = $_GET["username"]; if(empty($request_username)) &#123; echo "username == null"; exit; &#125; $request_key = $_GET["key"]; $time_to_live = 600; $timestamp = time() + $time_to_live;//失效时间 $response_username = $timestamp.":".$_GET["username"]; $response_key = $request_key; if(empty($response_key)) $response_key = "code_key"; //constants.py中CEOD_KEY $response_password = getSignature($response_username, $response_key); $jsonObj = new Response(); $jsonObj-&gt;username = $response_username; $jsonObj-&gt;password = $response_password; $jsonObj-&gt;ttl = 86400; //此处需配置自己的服务器 $jsonObj-&gt;uris= array("stun:webrtc.olcms.com:3478","turn:webrtc.olcms.com:3478?transport=udp","turn:webrtc.olcms.com?transport=tcp"); echo json_encode($jsonObj); /** * 使用HMAC-SHA1算法生成签名值 * * @param $str 源串 * @param $key 密钥 * * @return 签名值 */ function getSignature($str, $key) &#123; $signature = ""; if (function_exists('hash_hmac')) &#123; $signature = base64_encode(hash_hmac("sha1", $str, $key, true)); &#125; else &#123; $blocksize = 64; $hashfunc = 'sha1'; if (strlen($key) &gt; $blocksize) &#123; $key = pack('H*', $hashfunc($key)); &#125; $key = str_pad($key, $blocksize, chr(0x00)); $ipad = str_repeat(chr(0x36), $blocksize); $opad = str_repeat(chr(0x5c), $blocksize); $hmac = pack( 'H*', $hashfunc( ($key ^ $opad) . pack( 'H*', $hashfunc( ($key ^ $ipad) . $str ) ) ) ); $signature = base64_encode($hmac); &#125; return $signature; &#125; class Response &#123; public $username = ""; public $password = ""; public $ttl = ""; public $uris = array(""); &#125; ?&gt; iceconfig.php文件内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;?php $request_username = "inesadt"; //配置成自己的turn服务器用户名 if(empty($request_username)) &#123; echo "username == null"; exit; &#125; $request_key = "inesadt"; //配置成自己的turn服务器密码 $time_to_live = 600; $timestamp = time() + $time_to_live;//失效时间 $response_username = $timestamp.":".$_GET["username"]; $response_key = $request_key; if(empty($response_key)) $response_key = "CEOD_KEY";//constants.py中CEOD_KEY $response_password = getSignature($response_username, $response_key); $arrayObj = array(); $arrayObj[0]['username'] = $response_username; $arrayObj[0]['credential'] = $response_password; //配置成自己的stun/turn服务器 $arrayObj[0]['urls'][0] = "stun:webrtc.olcms.com:3478"; $arrayObj[0]['urls'][1] = "turn:webrtc.olcms.com:3478?transport=tcp"; $arrayObj[0]['uris'][0] = "stun:webrtc.olcms.com:3478"; $arrayObj[0]['uris'][1] = "turn:webrtc.olcms.com:3478?transport=tcp"; $jsonObj = new Response(); $jsonObj-&gt;lifetimeDuration = "300.000s"; $jsonObj-&gt;iceServers = $arrayObj; echo json_encode($jsonObj); /** * 使用HMAC-SHA1算法生成签名值 * * @param $str 源串 * @param $key 密钥 * * @return 签名值 */ function getSignature($str, $key) &#123; $signature = ""; if (function_exists('hash_hmac')) &#123; $signature = base64_encode(hash_hmac("sha1", $str, $key, true)); &#125; else &#123; $blocksize = 64; hashfunc = 'sha1'; if (strlen($key) &gt; $blocksize) &#123; $key = pack('H*', $hashfunc($key)); &#125; $key = str_pad($key, $blocksize, chr(0x00)); $ipad = str_repeat(chr(0x36), $blocksize); $opad = str_repeat(chr(0x5c), $blocksize); $hmac = pack( 'H*', $hashfunc( ($key ^ $opad) . pack( 'H*', $hashfunc( ($key ^ $ipad) . $str ) ) ) ); $signature = base64_encode($hmac); &#125; return $signature; &#125; class Response &#123; public $lifetimeDuration = ""; public $iceServers = array(""); &#125; ?&gt; 重启Nginx服务器和php7.0-fpm （未使用）12service nginx restart service php7.0-fpm restart 遇到问题 可以使用curl命令测试该服务器，看返回是否正常。 1$ curl -X POST "http://apprtc.wanttosee.com:3033/v1alpha/iceconfig?key=4080218913" 执行nginx时，报错 1"/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory) 解决1/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf 错误1Failed to start signaling: Failed to execute ‘pushState’ on ‘History’: A history state object with URL ‘http://192.168.6.54/r/198676628’ cannot be created in a document with origin ‘https://192.168.6.54’ and URL ‘https://192.168.6.54/ 解决方法1：房间服务器编译完成后，在/home/zhangkx/webrtc/apprtc/out/app_engine/js/apprtc.debug.js文件中找到1window.history.pushState(&#123;‘roomId’: roomId, ‘roomLink’: roomLink&#125;, roomId, roomLink) ，把这句话注释掉，重新运行即可。（如果重新编译，需要重新修改）解决方法2：在/home/zhangkx/webrtc/apprtc/src/web_app/js/appcontroller.js文件中找到1window.history.pushState(&#123;‘roomId’: roomId, ‘roomLink’: roomLink&#125;, roomId, roomLink) ，把这句话注释掉，然后重新编译，重新运行房间服务器即可。 https带域名https://www.cnblogs.com/qcjd/p/9324877.html]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebRTC国内镜像下载及编译]]></title>
    <url>%2Fwebrtc-build.html</url>
    <content type="text"><![CDATA[说明直接下载WebRTC源码，需要翻墙，使用VPN还不好使，需要自己架VPS。这里使用了Agora.io声网提供的WebRTC国内镜像源，无需翻墙，可以代替Google官方版本。（只读）2019年5月发布，来源：https://chromium.googlesource.com/external/webrtc/+/refs/heads/master 编译环境使用VM虚拟机搭建ubuntu环境编译，源码、第三方库、依赖文件等，占到20G以上，再加上编译，虚拟机至少要配个50G的存储空间。最佳编译环境是linux，win10上也能编译，mac上编译据说会遇到问题，未尝试过。使用系统：Ubuntu 16.04.6 LTS (Xenial Xerus)http://releases.ubuntu.com/16.04/ubuntu-16.04.6-desktop-amd64.isoPython：2.7(ubuntu16自带，注意不能使用3以上版本)git 1. 环境配置运行以下脚本，替换 git 源123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051git config --global user.email "&lt;your email&gt;"git config --global user.name "&lt;your name&gt;"git config --global url.http://120.92.49.206:3232/chromiumsrc/webrtc.git.insteadOf https://chromium.googlesource.com/external/webrtc.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/base.git.insteadOf https://chromium.googlesource.com/chromium/src/basegit config --global url.http://120.92.49.206:3232/chromiumsrc/build.git.insteadOf https://chromium.googlesource.com/chromium/src/buildgit config --global url.http://120.92.49.206:3232/chromiumsrc/buildtools.git.insteadOf https://chromium.googlesource.com/chromium/src/buildtoolsgit config --global url.http://120.92.49.206:3232/chromiumsrc/gradle.git.insteadOf https://chromium.googlesource.com/external/github.com/gradle/gradle.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/ios.git.insteadOf https://chromium.googlesource.com/chromium/src/ios.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/testing.git.insteadOf https://chromium.googlesource.com/chromium/src/testinggit config --global url.http://120.92.49.206:3232/chromiumsrc/third_party.git.insteadOf https://chromium.googlesource.com/chromium/src/third_partygit config --global url.http://120.92.49.206:3232/chromiumsrc/clang-format.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/cfe/tools/clang-format.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libcxx.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/libcxx.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libcxxabi.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/libcxxabi.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libunwind.git.insteadOf https://chromium.googlesource.com/external/llvm.org/libunwind.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/android_ndk.git.insteadOf https://chromium.googlesource.com/android_ndk.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/android_tools.git.insteadOf https://chromium.googlesource.com/android_tools.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/auto.git.insteadOf https://chromium.googlesource.com/external/github.com/google/auto.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/catapult.git.insteadOf https://chromium.googlesource.com/catapult.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/compact_enc_det.git.insteadOf https://chromium.googlesource.com/external/github.com/google/compact_enc_det.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/colorama.git.insteadOf https://chromium.googlesource.com/external/colorama.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/depot_tools.git.insteadOf https://chromium.googlesource.com/chromium/tools/depot_tools.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/errorprone.git.insteadOf https://chromium.googlesource.com/chromium/third_party/errorprone.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/ffmpeg.git.insteadOf https://chromium.googlesource.com/chromium/third_party/ffmpeg.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/findbugs.git.insteadOf https://chromium.googlesource.com/chromium/deps/findbugs.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/freetype2.git.insteadOf https://chromium.googlesource.com/chromium/src/third_party/freetype2.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/harfbuzz.git.insteadOf https://chromium.googlesource.com/external/github.com/harfbuzz/harfbuzz.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/gtest-parallel.git.insteadOf https://chromium.googlesource.com/external/github.com/google/gtest-parallelgit config --global url.http://120.92.49.206:3232/chromiumsrc/googletest.git.insteadOf https://chromium.googlesource.com/external/github.com/google/googletest.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/icu.git.insteadOf https://chromium.googlesource.com/chromium/deps/icu.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/jsr-305.git.insteadOf https://chromium.googlesource.com/external/jsr-305.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/jsoncpp.git.insteadOf https://chromium.googlesource.com/external/github.com/open-source-parsers/jsoncpp.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/junit.git.insteadOf https://chromium.googlesource.com/external/junit.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/fuzzer.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/compiler-rt/lib/fuzzer.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libjpeg_turbo.git.insteadOf https://chromium.googlesource.com/chromium/deps/libjpeg_turbo.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libsrtp.git.insteadOf https://chromium.googlesource.com/chromium/deps/libsrtp.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libvpx.git.insteadOf https://chromium.googlesource.com/webm/libvpx.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/libyuv.git.insteadOf https://chromium.googlesource.com/libyuv/libyuv.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/linux-syscall-support.git.insteadOf https://chromium.googlesource.com/linux-syscall-support.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/mockito.git.insteadOf https://chromium.googlesource.com/external/mockito/mockito.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/nasm.git.insteadOf https://chromium.googlesource.com/chromium/deps/nasm.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/openh264.git.insteadOf https://chromium.googlesource.com/external/github.com/cisco/openh264git config --global url.http://120.92.49.206:3232/chromiumsrc/requests.git.insteadOf https://chromium.googlesource.com/external/github.com/kennethreitz/requests.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/robolectric.git.insteadOf https://chromium.googlesource.com/external/robolectric.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/ub-uiautomator.git.insteadOf https://chromium.googlesource.com/chromium/third_party/ub-uiautomator.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/usrsctp.git.insteadOf https://chromium.googlesource.com/external/github.com/sctplab/usrsctpgit config --global url.http://120.92.49.206:3232/chromiumsrc/binaries.git.insteadOf https://chromium.googlesource.com/chromium/deps/yasm/binaries.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/patched-yasm.git.insteadOf https://chromium.googlesource.com/chromium/deps/yasm/patched-yasm.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/tools.git.insteadOf https://chromium.googlesource.com/chromium/src/toolsgit config --global url.http://120.92.49.206:3232/chromiumsrc/client-py.git.insteadOf https://chromium.googlesource.com/infra/luci/client-py.gitgit config --global url.http://120.92.49.206:3232/chromiumsrc/boringssl.git.insteadOf https://boringssl.googlesource.com/boringssl.git 指定同步目录12#指定当前目录为同步目录，也可以指定其他路径export WORKSPACE=`pwd` 安装depot_tools1234567cd $WORKSPACErm -rf depot_tools &amp;&amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git cd $WORKSPACE/depot_tools &amp;&amp; git checkout gitlabchmod +x $WORKSPACE/depot_tools/cipd export PATH=$PATH:$WORKSPACE/depot_tools 同步WebRTC12345678rm -rf $WORKSPACE/webrtc &amp;&amp; mkdir $WORKSPACE/webrtccd $WORKSPACE/webrtc &amp;&amp; gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab export CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clang #cd ~/depot_tools; git fetch; git reset --hard origin/gitlab; chmod +x ~/depot_tools/cipd cd $WORKSPACE/webrtc &amp;&amp; gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab 2. 编译Linux123456789101112apt-get updateapt-get install -y g++ export PATH=$PATH:$WORKSPACE/depot_tools cd $WORKSPACE/webrtc/src ./build/install-build-deps.sh gn gen out/Release "--args=is_debug=false" ninja -C out/Release Android12345678910111213141516171819202122232425# 安装依赖apt-get install -y software-properties-commonadd-apt-repository -y ppa:openjdk-r/ppa ./build/install-build-deps-android.sh # 添加安卓平台cd $WORKSPACE/webrtcecho "target_os = [ 'android' ]" &gt;&gt;.gclient # 同步export PATH=$PATH:$WORKSPACE/depot_toolsexport CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clang cd $WORKSPACE/webrtc &amp;&amp; gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab # 编译cd $WORKSPACE/webrtc/src gn gen android/Release "--args=is_debug=false target_os=\"android\" target_cpu=\"arm64\"" ninja -C android/Release iOS/macOS1234567891011121314151617181920212223242526272829303132export PATH=$PATH:$WORKSPACE/depot_tools export CDS_CLANG_BUCKET_OVERRIDE=https://chromiumsrc.gitlab.io/commondatastorage/chromium-browser-clanggit.sh # 安装depot_toolscd $WORKSPACErm -rf depot_tools &amp;&amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools cd $WORKSPACE/depot_tools &amp;&amp; git checkout gitlabchmod +x $WORKSPACE/depot_tools/cipd cd $WORKSPACErm -rf $WORKSPACE/webrtc &amp;&amp; mkdir $WORKSPACE/webrtc cd $WORKSPACE/webrtc &amp;&amp; \gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab cd $WORKSPACE/webrtc &amp;&amp; \gclient sync\ --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab sudo xcode-select -s /Applications/Xcode.app/Contents/Developer cd $WORKSPACE/webrtc/src &amp;&amp; \gn gen out/Release "--args=is_debug=false" cd $WORKSPACE/webrtc/src &amp;&amp; \ninja -C out/Release Windows123456789101112131415161718192021222324252627282930313233343536373839#安装依赖1. git - https://git-scm.com/download/win 2. visualstudio2017community - https://download.visualstudio.microsoft.com/download/pr/aaebc214-bc67-4137-9bea-04fcb0c90720/2e18f27594472d0c7515d9cbe237bd56/vs_community.exe&gt; 2.1 Modify "Windows Software Development Kit" &gt; +Debugging Tools for Windows 3. python2 - https://www.python.org/downloads/release/python-2716/&gt; 3.1 pip install pywin32 #设置1. 执行git.sh #安装depot_toolscd %USERPROFILE%rd /s /q depot_tools webrtc &amp; git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git -b gitlab #配置set PATH=%PATH%;%USERPROFILE%\depot_tools cd %USERPROFILE% &amp;&amp; ^rd /s /q webrtc &amp; mkdir webrtc cd %USERPROFILE%\webrtc &amp;&amp; ^gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab #同步set CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clangset DEPOT_TOOLS_WIN_TOOLCHAIN=0 cd %USERPROFILE%\webrtc &amp;&amp; ^gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab #生成cd %USERPROFILE%\webrtc\src &amp;&amp;&amp; ^gn gen out/Release "--args=is_debug=false" #编译cd %USERPROFILE%\webrtc\src &amp;&amp; ^ninja -C out/Release 如果遇到不能下载，请检查是否设置了不可用代理，或者限制了端口。参考WebRTC开发者社区： https://rtcdeveloper.com/t/topic/14914声网镜像地址： https://webrtc.org.cn/mirror/]]></content>
      <categories>
        <category>webrtc</category>
      </categories>
      <tags>
        <tag>webrtc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[畅言去广告代码]]></title>
    <url>%2Fchangyanquguanggao.html</url>
    <content type="text"><![CDATA[博客重新翻新了一番，放了一段时间后，正准备启用，结果发现使用第三方的评论系统搜狐畅言，竟然有广告了，而且还是很恶心的评论框下方广告和网页右下角广告都有。看了一下去广告价格，惹不起惹不起。 由于博客挂在Github上，没有独立的服务器，然后其他的第三方评论系统关的关，墙的墙，没什么比较好的可以用。所以畅言用还是要用的，广告也还是要去的。 网上搜罗加自己分析了一下，有如下代码可用： 12/* 畅言评论广告隐藏 */#feedAv&#123; margin-top: -250px!important;transform: scale(0);&#125; 12/* 畅言右下角广告隐藏 */#pop_ad&#123; margin-top: -250px!important;transform: scale(0);&#125; /* 评论框美化 */ .module-cmt-box{padding:10px 16px!important;} .header-login{left: 746px!important;border: 0!important;border-radius: 0!important;} .post-wrap-border-t-r,.post-wrap-border-t-l,.post-wrap-border-r,.post-wrap-border-l{display:none;} .post-wrap-main{border:0!important;} .post-wrap-w{background:#f0f0f0;border-radius:5px;box-shadow: 0 2px 6px rgba(0,0,0,.2)} .btn-fw{background:#5fb878 url(https://static.krnet.cc/skin/images/release.svg)center no-repeat !important;width:60px !important; height:60px !important;border-radius:70px;important;margin-top:-5px!important;margin-right:40px!important;background-size:30px !important;box-shadow: 0 2px 6px rgba(0,0,0,.2);-webkit-transition:.3s;transition:.3s} .btn-fw:hover{box-shadow: 0 6px 10px rgba(0,0,0,.2);} .block-head-w{margin-top:-20px !important;} .section-service-w{height: 0px;opacity: 0;} .head-img-w{margin:0px 0 0 0 !important;} .head-img-w img{width:50px !important;height:50px !important;} .head-img-w{top:115px!important;left:-0px!important;} .wrap-action-gw{border-bottom:1px solid #dee4e9 !important;padding-top:30px!important;} .wrap-action-gw span,.wrap-action-gw i,.type-lists,.cmt-list-number,.title-name-gw-tag,.wrap-name-w{display:none!important;} .cmt-list-type{margin:0!important;} .build-floor-gw{background:#f0f0f0 !important} .block-cont-gw{padding:20px 0 !important;border:0 !important;} .section-list-w{width:95%!important;margin-left:2%!important;} 使用方法：在theme/source/css/_common/components/post/post.styl中追加如上代码即可。前面两个根据div的id，把广告显示隐藏掉。最后一段是把评论框美化一下。美化后的效果： 如果不想改变样式，只想去广告，就用上面两句就行了。以上美化部分的代码摘自夜雨聆风。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo, next</tag>
      </tags>
  </entry>
</search>
