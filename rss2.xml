<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>20864</title>
    <link>http://www.20864.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>要么旅行,要么读书,身体和灵魂必须有一个在路上。</description>
    <pubDate>Fri, 06 Nov 2020 08:14:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>TS格式转MP4时PTS的转换</title>
      <link>http://www.20864.com/ts-to-mp4.html</link>
      <guid>http://www.20864.com/ts-to-mp4.html</guid>
      <pubDate>Fri, 06 Nov 2020 05:46:20 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;DTS、PTS&quot;&gt;&lt;a href=&quot;#DTS、PTS&quot; class=&quot;headerlink&quot; title=&quot;DTS、PTS&quot;&gt;&lt;/a&gt;DTS、PTS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DTS（Decoding Time Stamp）：即解码时间戳，这个时间戳的意义在于告诉播放器该在什么时候解码这一帧的数据。&lt;/li&gt;
&lt;li&gt;PTS（Presentation Time Stamp）：即显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要注意的是：虽然 DTS、PTS 是用于指导播放端的行为，但它们是在编码的时候由编码器生成的。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="DTS、PTS"><a href="#DTS、PTS" class="headerlink" title="DTS、PTS"></a>DTS、PTS</h2><ul><li>DTS（Decoding Time Stamp）：即解码时间戳，这个时间戳的意义在于告诉播放器该在什么时候解码这一帧的数据。</li><li>PTS（Presentation Time Stamp）：即显示时间戳，这个时间戳用来告诉播放器该在什么时候显示这一帧的数据。</li></ul><p>需要注意的是：虽然 DTS、PTS 是用于指导播放端的行为，但它们是在编码的时候由编码器生成的。</p><a id="more"></a><h2 id="音视频的同步"><a href="#音视频的同步" class="headerlink" title="音视频的同步"></a>音视频的同步</h2><p>音频视频混合在一起播放，就呈现了我们常常看到的广义的视频。在音视频一起播放的时候，我们通常需要面临一个问题：怎么去同步它们，以免出现画不对声的情况。<br>要实现音视频同步，通常需要选择一个参考时钟，参考时钟上的时间是线性递增的，编码音视频流时依据参考时钟上的时间给每帧数据打上时间戳。在播放时，读取数据帧上的时间戳，同时参考当前参考时钟上的时间来安排播放。这里的说的时间戳就是我们前面说的 PTS。</p><h2 id="PTS和DTS的时间基"><a href="#PTS和DTS的时间基" class="headerlink" title="PTS和DTS的时间基"></a>PTS和DTS的时间基</h2><p>在FFmpeg中，引入了时间基（time_base）的概念，它用来度量时间的。<br>如果把1秒分为25等份，你可以理解就是一把尺，那么每一格表示的就是1/25秒。此时的time_base={1，25}<br>如果你是把1秒分成90000份，每一个刻度就是1/90000秒，此时的time_base={1，90000}。<br>所谓时间基表示的就是每个刻度是多少秒，pts的值就是占多少个时间刻度（占多少个格子）。它的单位不是秒，而是时间刻度。只有pts加上time_base两者同时在一起，才能表达出时间是多少。<br>即当pts=100时，time_base={1, 90000}时，当前帧的播放位置=100*1/90000秒处。</p><h2 id="时间基的转换"><a href="#时间基的转换" class="headerlink" title="时间基的转换"></a>时间基的转换</h2><p>不同的封装格式，time_base是不一样的。<br>供参考的mpegts, mp4, mov和flv四种格式的time_base<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ts格式</span><br><span class="line">video: <span class="number">90</span>k</span><br><span class="line">audio: <span class="number">90</span>k</span><br><span class="line">所以video与audio的封装层的timebase是一致的，均为<span class="number">90</span>k</span><br><span class="line"></span><br><span class="line">mp4格式</span><br><span class="line">video: <span class="number">12800</span></span><br><span class="line">audio: <span class="number">44100</span></span><br><span class="line">audio及video的封装层timebase不一致，video为<span class="number">128000</span>，audio为<span class="number">44100</span>（与采样率一致）</span><br><span class="line"></span><br><span class="line">mov格式</span><br><span class="line">video: <span class="number">12800</span></span><br><span class="line">audio: <span class="number">44100</span></span><br><span class="line">与mp4格式一致</span><br><span class="line"></span><br><span class="line">flv格式</span><br><span class="line">video: <span class="number">1</span>k</span><br><span class="line">audio: <span class="number">1</span>k</span><br><span class="line">audio与video的封装层timebase一致</span><br></pre></td></tr></table></figure></p><h2 id="转换实例"><a href="#转换实例" class="headerlink" title="转换实例"></a>转换实例</h2><p>mpegts转mp4时，因为mp4的video与audio timebase不一致，所以要分别转换。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mp4.video.pts = ts.video.pts * <span class="number">12800</span> / <span class="number">90000</span>;</span><br><span class="line">mp4.audio.pts = ts.audio.pts * <span class="number">8000</span> / <span class="number">90000</span>;<span class="comment">//8000采样率</span></span><br></pre></td></tr></table></figure></p><p>反之，mp4转mpegts时<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ts.video.pts = mp4.video.pts * <span class="number">90000</span> / <span class="number">12800</span>;</span><br><span class="line">ts.audio.pts = mp4.audio.pts * <span class="number">90000</span> / <span class="number">8000</span>;<span class="comment">//8000采样率</span></span><br></pre></td></tr></table></figure></p>]]></content:encoded>
      
      <comments>http://www.20864.com/ts-to-mp4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>WebRTC 服务器搭建</title>
      <link>http://www.20864.com/webrtc-server.html</link>
      <guid>http://www.20864.com/webrtc-server.html</guid>
      <pubDate>Sat, 06 Jun 2020 08:16:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;操作系统： Ubuntu 16.04 64bits&lt;/p&gt;
&lt;h2 id=&quot;服务器组成&quot;&gt;&lt;a href=&quot;#服务器组成&quot; class=&quot;headerlink&quot; title=&quot;服务器组成&quot;&gt;&lt;/a&gt;服务器组成&lt;/h2&gt;&lt;p&gt;AppRTC 房间+Web服务器 &lt;a href=&quot;https://github.com/webrtc/apprtc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/webrtc/apprtc&lt;/a&gt;&lt;br&gt;Collider 信令服务器，在AppRTC源码里&lt;br&gt;CoTurn coturn打洞+中继服务器&lt;br&gt;Nginx 服务器，用于Web访问代理和Websocket代理。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>操作系统： Ubuntu 16.04 64bits</p><h2 id="服务器组成"><a href="#服务器组成" class="headerlink" title="服务器组成"></a>服务器组成</h2><p>AppRTC 房间+Web服务器 <a href="https://github.com/webrtc/apprtc" target="_blank" rel="noopener">https://github.com/webrtc/apprtc</a><br>Collider 信令服务器，在AppRTC源码里<br>CoTurn coturn打洞+中继服务器<br>Nginx 服务器，用于Web访问代理和Websocket代理。</p><a id="more"></a><p>AppRTC 房间+Web服务器使用python+js语言<br>AppRTC Collider信令服务器采用go语言<br>Coturn 采用C语言</p><p>在部署到公网时需要通过Nginx做Web和Websocket的代理连接<br>实际开发：把信令+房间管理 都是写到一个服务器</p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>注意，本文中apt-get都是用apt的方式，该命令仅在ubuntu16及以上版本支持，两者无大差别，请根据自己系统版本及使用习惯使用。</p><h4 id="基础软件"><a href="#基础软件" class="headerlink" title="基础软件"></a>基础软件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装vim</span></span><br><span class="line">sudo apt install vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JDK</span></span><br><span class="line"><span class="comment"># 添加ppa源，并更新源</span></span><br><span class="line">sudo add-apt-repository ppa:openjdk-r/ppa </span><br><span class="line">sudo apt update</span><br><span class="line"><span class="comment"># 安装openjdk 8 </span></span><br><span class="line">sudo apt install openjdk-8-jdk</span><br><span class="line">java -version</span><br><span class="line"><span class="comment"># openjdk version "1.8.0_265"</span></span><br></pre></td></tr></table></figure><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/webrtc</span><br><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br></pre></td></tr></table></figure><p>我的webrtc目录为/home/zhangkx/webrtc，后续都是采用该目录。</p><h4 id="安装nodejs及相关"><a href="#安装nodejs及相关" class="headerlink" title="安装nodejs及相关"></a>安装nodejs及相关</h4><p>注意：nodejs 安装10以上版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line">wget https://nodejs.org/dist/v10.16.0/node-v10.16.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v10.16.0-linux-x64.tar.xz</span><br><span class="line"><span class="built_in">cd</span> node-v10.16.0-linux-x64/</span><br><span class="line"></span><br><span class="line">ls -al ./bin/</span><br><span class="line"><span class="comment"># bin目录下应该要有npm和node文件，建立软连接</span></span><br><span class="line">sudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">sudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/</span><br><span class="line"><span class="comment"># 查看版本号</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># V10.16.0</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># 6.9.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入node-v10.16.0-linux-x64/bin目录下，安装grunt-cli</span></span><br><span class="line"><span class="built_in">cd</span> bin</span><br><span class="line">sudo npm -g install grunt-cli</span><br><span class="line">sudo ln -s /home/zhangkx/webrtc/node-v10.16.0-linux-x64/bin/grunt /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">grunt -version</span><br><span class="line"><span class="comment"># grunt-cli v1.3.2</span></span><br></pre></td></tr></table></figure></p><p>也可以通过apt install nodejs方式安装，可能出现版本及依赖不对的问题，所以本文未采用该方式。</p><h4 id="安装Python和Python-webtest"><a href="#安装Python和Python-webtest" class="headerlink" title="安装Python和Python-webtest"></a>安装Python和Python-webtest</h4><p>ubuntu16自带python2.7<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line"><span class="comment"># Python 2.7.12</span></span><br></pre></td></tr></table></figure></p><p>如果没有则安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python</span><br></pre></td></tr></table></figure></p><p>安装python-webtest<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-webtest</span><br></pre></td></tr></table></figure></p><h2 id="搭建房间服务器（Room-Server）"><a href="#搭建房间服务器（Room-Server）" class="headerlink" title="搭建房间服务器（Room Server）"></a>搭建房间服务器（Room Server）</h2><h4 id="下载apprtc源码"><a href="#下载apprtc源码" class="headerlink" title="下载apprtc源码"></a>下载apprtc源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/webrtc/apprtc.git   </span><br><span class="line"><span class="built_in">cd</span> apprtc</span><br><span class="line">sudo npm install</span><br></pre></td></tr></table></figure><p>apprtc下package.json文件，定义了需要安装哪些依赖项，在package.json当前目录执行npm install，安装依赖模块在这个目录的node_modules文件夹下，如果执行npm install -g，为全局安装，所有nodejs都可以用。</p><h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h4><p>配置防火墙，允许访问8090端口（tcp端口，此端口用于web访问）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许外部访问8090端口（tcp/udp），其他端口类似</span></span><br><span class="line">sudo ufw allow 8090</span><br></pre></td></tr></table></figure></p><p>1.配置文件修改（主要是配置apprtc对应的conturn和collider相关参数）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/webrtc/apprtc/src/app_engine/constants.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># Turn/Stun server override. This allows AppRTC to connect to turn servers</span></span><br><span class="line"><span class="comment"># directly rather than retrieving them from an ICE server provider.</span></span><br><span class="line"><span class="comment"># ICE_SERVER_OVERRIDE = None### 这里注释掉</span></span><br><span class="line"><span class="comment"># Enable by uncomment below and comment out above, then specify turn and stun</span></span><br><span class="line">ICE_SERVER_OVERRIDE = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"urls"</span>: [</span><br><span class="line"> <span class="string">"turn:192.168.3.110:3478?transport=udp"</span>,</span><br><span class="line"> <span class="string">"turn:192.168.3.110:3478?transport=tcp"</span></span><br><span class="line">    ],</span><br><span class="line"> <span class="string">"username"</span>: <span class="string">"zhangkx"</span>,</span><br><span class="line"> <span class="string">"credential"</span>: <span class="string">"123456"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"> <span class="string">"urls"</span>: [</span><br><span class="line"> <span class="string">"stun:192.168.3.110:3478"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">ICE_SERVER_BASE_URL = <span class="string">'https:192.168.3.110'</span></span><br><span class="line">ICE_SERVER_URL_TEMPLATE = <span class="string">'%s/v1alpha/iceconfig?key=%s'</span> <span class="comment"># 如果iceconfig.php未实现，可用默认配置，但是Android Apk会有问题</span></span><br><span class="line">ICE_SERVER_API_KEY = os.environ.get(<span class="string">'ICE_SERVER_API_KEY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dictionary keys in the collider instance info constant.</span></span><br><span class="line">WSS_INSTANCE_HOST_KEY = <span class="string">'192.168.3.110:8088'</span>  <span class="comment"># 信令服务器端口号8088  </span></span><br><span class="line">WSS_INSTANCE_NAME_KEY = <span class="string">'vm_name'</span></span><br><span class="line">WSS_INSTANCE_ZONE_KEY = <span class="string">'zone'</span></span><br><span class="line">WSS_INSTANCES = [&#123;</span><br><span class="line">WSS_INSTANCE_HOST_KEY: <span class="string">'192.168.3.110:8088'</span>,</span><br><span class="line">    WSS_INSTANCE_NAME_KEY: <span class="string">'wsserver-std'</span>,</span><br><span class="line">    WSS_INSTANCE_ZONE_KEY: <span class="string">'us-central1-a'</span>  </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc/apprtc</span><br><span class="line">sudo npm install</span><br><span class="line">sudo grunt build</span><br></pre></td></tr></table></figure><p>编译完成之后，会生成out目录，房间服务器编译完成。</p><h4 id="安装和配置google-app-engine"><a href="#安装和配置google-app-engine" class="headerlink" title="安装和配置google app engine"></a>安装和配置google app engine</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line"><span class="comment"># 下载google_appengine</span></span><br><span class="line">wget https://storage.googleapis.com/appengine-sdks/featured/google_appengine_1.9.40.zip</span><br><span class="line">unzip google_appengine_1.9.40.zip</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置环境变量：</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 在最后添加一行</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/home/zhangkx/webrtc/google_appengine</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h4 id="运行房间服务器（room-server"><a href="#运行房间服务器（room-server" class="headerlink" title="运行房间服务器（room server)"></a>运行房间服务器（room server)</h4><p>在目录/home/zhangkx/webrtc/google_appengine目录下找到dev_appserver.py脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认端口是8080，这里我们指定为8090</span></span><br><span class="line">sudo /home/zhangkx/webrtc/google_appengine/dev_appserver.py --host=0.0.0.0 --port=8090 /home/zhangkx/webrtc/apprtc/out/app_engine --skip_sdk_update_check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若想后台运行，则执行</span></span><br><span class="line">sudo nohup /home/zhangkx/webrtc/google_appengine/dev_appserver.py --host=0.0.0.0 --port=8090 /home/zhangkx/webrtc/apprtc/out/app_engine --skip_sdk_update_check &amp;</span><br></pre></td></tr></table></figure></p><p>因为是为公网、或者局域网其他人提供服务，所以这里 host=0.0.0.0，以避免只监听 127.0.0.1 的状况</p><h4 id="在浏览器中访问房间服务器"><a href="#在浏览器中访问房间服务器" class="headerlink" title="在浏览器中访问房间服务器"></a>在浏览器中访问房间服务器</h4><p><a href="http://192.168.3.110:8090" target="_blank" rel="noopener">http://192.168.3.110:8090</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启控制台新窗口，查看是否成功</span></span><br><span class="line">sudo lsof -i:8090</span><br><span class="line"><span class="comment"># 输出下列内容</span></span><br><span class="line">COMMAND  PID  USER  FD  TYPE  DEVICE  SIZE/OFF  NODE  NAME</span><br><span class="line">python  5248  root  8u  IPv4  83337    0t0      TCP  *:8090  (LISTEN)</span><br></pre></td></tr></table></figure></p><h2 id="搭建信令服务器-Collider-Server"><a href="#搭建信令服务器-Collider-Server" class="headerlink" title="搭建信令服务器(Collider Server)"></a>搭建信令服务器(Collider Server)</h2><h4 id="安装go语言编译器"><a href="#安装go语言编译器" class="headerlink" title="安装go语言编译器"></a>安装go语言编译器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install golang-go</span><br><span class="line"><span class="comment"># 查看版本号 </span></span><br><span class="line">go version</span><br><span class="line"><span class="comment"># go version go1.6.2 linux/amd64</span></span><br></pre></td></tr></table></figure><h4 id="复制collider源代码"><a href="#复制collider源代码" class="headerlink" title="复制collider源代码"></a>复制collider源代码</h4><p>创建go工作目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line">mkdir -p goworkspace/src</span><br><span class="line"><span class="comment">#配置环境变量：</span></span><br><span class="line">sudo vim /etc/profile</span><br><span class="line"><span class="comment"># 在最后添加一行</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/zhangkx/webrtc/goworkspace</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><p>（此源码在房间服务器源码目录下/home/zhangkx/webrtc/apprtc/src/collider/)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将collider的源码软连接到go的工作目录下</span></span><br><span class="line">ln -s /home/zhangkx/webrtc/apprtc/src/collider/collider <span class="variable">$GOPATH</span>/src</span><br><span class="line">ln -s /home/zhangkx/webrtc/apprtc/src/collider/collidermain <span class="variable">$GOPATH</span>/src</span><br><span class="line">ln -s /home/zhangkx/webrtc/apprtc/src/collider/collidertest <span class="variable">$GOPATH</span>/src</span><br></pre></td></tr></table></figure></p><h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><p>1.编辑文件$GOPATH/src/collidermain/main.go，修改房间服务器的地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var roomSrv = flag.String(<span class="string">"room-server"</span>, <span class="string">"http://192.168.3.110:8090"</span>, <span class="string">"The origin of the room server"</span>)</span><br></pre></td></tr></table></figure></p><p>如果不改这句，需要在启动信令服务器的命令中添加-room-server=”<a href="http://192.168.3.110:8090&quot;" target="_blank" rel="noopener">http://192.168.3.110:8090&quot;</a></p><p>2.<br>修改SSL证书地址：<br>编辑文件$GOPATH/src/collider/collider.go，修改下面这句：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/cert/cert.pem与/cert/key.pem改为自己使用的证书地址</span></span><br><span class="line">e = server.ListenAndServeTLS(<span class="string">"/cert/cert.pem"</span>, <span class="string">"/cert/key.pem"</span>)</span><br></pre></td></tr></table></figure></p><p>SSL证书生成见后续Nginx配置。</p><h4 id="编译信令服务器"><a href="#编译信令服务器" class="headerlink" title="编译信令服务器"></a>编译信令服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span><br><span class="line"><span class="comment"># 执行go get collidermain， 会被墙。</span></span><br><span class="line"><span class="comment"># 报错: package golang.org/x/net/websocket: unrecognized import path "golang.org/x/net/websocket"</span></span><br><span class="line"><span class="comment"># 改为执行</span></span><br><span class="line">sudo mkdir -p <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line">sudo git <span class="built_in">clone</span> https://github.com/golang/net.git net</span><br><span class="line">sudo go install net</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译collidermain</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src</span><br><span class="line">go get collidermain</span><br><span class="line">go install collidermain</span><br></pre></td></tr></table></figure><p>编译成功后，在$GOPATH下会生成bin和pkg目录。 </p><h4 id="运行信令服务器"><a href="#运行信令服务器" class="headerlink" title="运行信令服务器"></a>运行信令服务器</h4><p>配置防火墙，允许访问8089端口（tcp，用于客户端和collider建立websocket信令通信）<br>运行信令服务器（没有生成pcm签名文件的话会报错）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="variable">$GOPATH</span>/bin/collidermain -port=8089 -tls=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 若想后台运行，则执行</span></span><br><span class="line">sudo nohup <span class="variable">$GOPATH</span>/bin/collidermain -port=8089 -tls=<span class="literal">true</span> &amp;</span><br></pre></td></tr></table></figure></p><p>没有修改main.go的话，需要在命令后面加上room-server参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="variable">$GOPATH</span>/bin/collidermain -port=8089 -tls=<span class="literal">true</span> -room-server=<span class="string">"http://192.168.3.110:8090"</span></span><br></pre></td></tr></table></figure></p><p>-room-server=”<a href="http://192.168.3.110:8090&quot;" target="_blank" rel="noopener">http://192.168.3.110:8090&quot;</a> 实际是连接房间服务器的地址<br>tls=true，上面constants.py不需要修改；tls=false，需要把constants.py中的wss://和https:// 改为ws://和http://</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启控制台新窗口，检查是否成功</span></span><br><span class="line">sudo lsof -i:8089</span><br><span class="line"><span class="comment">#显示</span></span><br><span class="line">COMMAND    PID  USER  FD  TYPE  DEVICE  SIZE/OFF  NODE  NAME</span><br><span class="line">colliderm  5610 root  3u  IPv6  92193      0t0    TCP   *:8089 (LISTEN)</span><br></pre></td></tr></table></figure><h2 id="搭建STUN-TURN服务器"><a href="#搭建STUN-TURN服务器" class="headerlink" title="搭建STUN\TURN服务器"></a>搭建STUN\TURN服务器</h2><h4 id="安装coturn"><a href="#安装coturn" class="headerlink" title="安装coturn"></a>安装coturn</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libssl-dev</span><br><span class="line">sudo apt-get install libevent-dev</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line">wget http://coturn.net/turnserver/v4.5.0.7/turnserver-4.5.0.7.tar.gz</span><br><span class="line">tar xfz turnserver-4.5.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> turnserver-4.5.0.7</span><br><span class="line"></span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h4 id="进行相关配置（废弃）"><a href="#进行相关配置（废弃）" class="headerlink" title="进行相关配置（废弃）"></a>进行相关配置（废弃）</h4><p>编辑文件/etc/default/coturn和/etc/turnserver.conf，这两个文件没找到。<br>配置这些文件后，可以使用service coturn start进行启动。我们启动时，使用turnserver命令启动，后面自带参数，就不用配置了。</p><h4 id="启动coturn服务器"><a href="#启动coturn服务器" class="headerlink" title="启动coturn服务器"></a>启动coturn服务器</h4><p>配置防火墙，允许访问3478端口（含tcp和udp，此端口用于nat穿透）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 账号:zhangkx 密码：123456，在apprtc中有配置</span></span><br><span class="line">sudo turnserver -L 0.0.0.0 -a -u zhangkx:123456 -v -f -r nort.gov</span><br><span class="line"><span class="comment"># 若想后台运行，则执行</span></span><br><span class="line">sudo nohup turnserver -L 0.0.0.0 -a -u zhangkx:123456 -v -f -r nort.gov &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># x外网ip,L和E是内网ip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启控制台新窗口，查询是否成功</span></span><br><span class="line">sudo lsof -i:3478</span><br><span class="line">COMMAND    PID  USER  FD  TYPE  DEVICE  SIZE/OFF  NODE  NAME</span><br><span class="line">turnserver 5822 root  40u IPv4  92909     0t0     UDP   *:3478</span><br><span class="line">turnserver 5822 root  41u IPv4  92910     0t0     UDP   *:3478</span><br><span class="line">turnserver 5822 root  42u IPv4  92911     0t0     UDP   *:3478</span><br><span class="line">...</span><br><span class="line">turnserver 5822 root  65u IPv4  91553     0t0     TCP   *:3478 (LiSTEN)</span><br><span class="line">turnserver 5822 root  66u IPv4  96745     0t0     TCP   *:3478 (LiSTEN)</span><br><span class="line">turnserver 5822 root  67u IPv4  97486     0t0     TCP   *:3478 (LiSTEN)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="配置Nginx服务器"><a href="#配置Nginx服务器" class="headerlink" title="配置Nginx服务器"></a>配置Nginx服务器</h2><p>用来统一 HTTP 对外服务端口，以及最主要的反代 3033 TURN REST API服务<br>注意安装的时候要带ssl</p><h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/webrtc</span><br><span class="line"><span class="comment"># 安装依赖：gcc、g++依赖库</span></span><br><span class="line">sudo apt-get install build-essential libtool</span><br><span class="line"><span class="comment"># 安装 pcre依赖库（http://www.pcre.org/）</span></span><br><span class="line">sudo apt-get install libpcre3 libpcre3-dev</span><br><span class="line"><span class="comment"># 安装 zlib依赖库（http://www.zlib.net）</span></span><br><span class="line">sudo apt-get install zlib1g-dev</span><br><span class="line"><span class="comment"># 安装ssl依赖库</span></span><br><span class="line">sudo apt-get install openssl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载nginx 1.15.8版本</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.15.8.tar.gz</span><br><span class="line">tar xvzf nginx-1.15.8.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.15.8/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置，一定要支持https</span></span><br><span class="line">sudo ./configure --with-http_ssl_module </span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译 安装</span></span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>默认安装目录：/usr/local/nginx<br>启动：sudo /usr/local/nginx/sbin/nginx<br>停止：sudo /usr/local/nginx/sbin/nginx -s stop<br>重新加载配置文件：sudo /usr/local/nginx/sbin/nginx -s reload</p><h4 id="配置Nginx-未使用"><a href="#配置Nginx-未使用" class="headerlink" title="配置Nginx (未使用)"></a>配置Nginx (未使用)</h4><p>编辑配置文件/etc/nginx/sites-available/default<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        <span class="keyword">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="keyword">listen</span> [::]:<span class="number">80</span> default_server;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">        <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">        <span class="comment"># Don't use them in a production server!</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        <span class="keyword">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name <span class="number">192.168</span>.<span class="number">3.110</span>; <span class="comment">#添加地址</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">             try_files $uri $uri/ =<span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        .....</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/cert</span><br><span class="line"><span class="built_in">cd</span> ~/cert</span><br><span class="line"><span class="comment"># CA私钥</span></span><br><span class="line">openssl genrsa -out key.pem 2048</span><br><span class="line"><span class="comment"># 自签名证书</span></span><br><span class="line">openssl req -new -x509 -key key.pem -out cert.pem -days 1095</span><br></pre></td></tr></table></figure><h4 id="Web代理"><a href="#Web代理" class="headerlink" title="Web代理"></a>Web代理</h4><p>反向代理apprtc，使之支持https访问，如果http直接访问apprtc，则客户端无法启动视频音频采集（必须得用https访问)<br>即使用<a href="http://192.168.3.110:8090，可以打开room" target="_blank" rel="noopener">http://192.168.3.110:8090，可以打开room</a> server服务器，但是加入房间后，无法启动音视频采集。</p><h4 id="配置web服务器"><a href="#配置web服务器" class="headerlink" title="配置web服务器"></a>配置web服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（新建文件）</span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/nginx/conf/conf.d/apprtc-https-proxy.conf</span><br><span class="line"></span><br><span class="line">upstream roomserver &#123;</span><br><span class="line">   server 192.168.3.110:8090;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /home/zhangkx/cert/cert.pem;</span><br><span class="line">    ssl_certificate_key /home/zhangkx/cert/key.pem; </span><br><span class="line">    charset utf-8;</span><br><span class="line">    <span class="comment"># ip地址或者域名</span></span><br><span class="line">    server_name 192.168.3.110;</span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 转向代理的地址</span></span><br><span class="line">        proxy_pass http://roomserver<span class="variable">$request_uri</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sudo vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 在末尾&#125;之前，添加下行内容，包含文件</span></span><br><span class="line">include /usr/<span class="built_in">local</span>/nginx/conf/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置websocket代理"><a href="#配置websocket代理" class="headerlink" title="配置websocket代理"></a>配置websocket代理</h4><p>ws 不安全的连接 类似http<br>wss是安全的连接，类似https<br>完整配置文件：/usr/local/nginx/conf/conf.d/apprtc-websocket-proxy.conf<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">map <span class="variable">$http_upgrade</span> <span class="variable">$connection_upgrade</span> &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    <span class="string">''</span> close;</span><br><span class="line">&#125;</span><br><span class="line">upstream websocket &#123;</span><br><span class="line">    server 192.168.3.110:8089;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 8088 ssl;</span><br><span class="line">    ssl_certificate /home/zhangkx/cert/cert.pem;</span><br><span class="line">    ssl_certificate_key /home/zhangkx/cert/key.pem;</span><br><span class="line"></span><br><span class="line">    server_name 192.168.3.110;</span><br><span class="line">    location /ws &#123;</span><br><span class="line">        proxy_pass http://websocket;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_connect_timeout 4s; <span class="comment">#配置点1</span></span><br><span class="line">        proxy_read_timeout 6000s; <span class="comment">#配置点2，如果没效，可以考虑这个时间配置长一点</span></span><br><span class="line">        proxy_send_timeout 6000s; <span class="comment">#配置点3</span></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>—– 以下未使用 —–</p><h4 id="安装php和php-fpm"><a href="#安装php和php-fpm" class="headerlink" title="安装php和php-fpm"></a>安装php和php-fpm</h4><p>ubuntu 16上，php是7.0的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php  </span><br><span class="line">apt-get install php7.0-fpm</span><br></pre></td></tr></table></figure></p><h4 id="编辑配置文件-etc-nginx-sites-available-default"><a href="#编辑配置文件-etc-nginx-sites-available-default" class="headerlink" title="编辑配置文件/etc/nginx/sites-available/default"></a>编辑配置文件/etc/nginx/sites-available/default</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">upstream roomserver &#123;</span><br><span class="line">                server 192.168.3.110:8090;</span><br><span class="line">        &#125;</span><br><span class="line">        server &#123;</span><br><span class="line">                listen 80 ;</span><br><span class="line">                server_name webrtc.olcms.com;</span><br><span class="line">                <span class="built_in">return</span>  301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        server &#123;</span><br><span class="line">                <span class="comment"># listen 80 default_server;</span></span><br><span class="line">                <span class="comment"># listen [::]:80 default_server;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># SSL configuration</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">                <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">                listen 443;</span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">                <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">                <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">                <span class="comment"># Don't use them in a production server!</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">                root /var/www/html;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">                index index.html index.htm index.nginx-debian.html index.php; <span class="comment">#此处添加index.php</span></span><br><span class="line"></span><br><span class="line">                server_name webrtc.olcms.com;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># location / &#123;</span></span><br><span class="line">                        <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                        <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                        <span class="comment"># try_files $uri $uri/ =404;</span></span><br><span class="line">                <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">               <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                location ~ \.php$ &#123;</span><br><span class="line">                        include snippets/fastcgi-php.conf;</span><br><span class="line">                        <span class="comment"># With php7.0-cgi alone:</span></span><br><span class="line">                        <span class="comment">#fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">                        <span class="comment"># With php7.0-fpm:</span></span><br><span class="line">                        fastcgi_pass unix:/run/php/php7.0-fpm.sock;</span><br><span class="line">                &#125;</span><br><span class="line">                location / &#123;</span><br><span class="line">                       proxy_pass http://roomserver<span class="variable">$request_uri</span>;</span><br><span class="line">                       proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">                <span class="comment"># concurs with nginx's one</span></span><br><span class="line">                <span class="comment">#</span></span><br><span class="line">                <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">                <span class="comment">#       deny all;</span></span><br><span class="line">                <span class="comment">#&#125;</span></span><br><span class="line">                ssl on;</span><br><span class="line">                ssl_certificate /etc/letsencrypt/live/webrtc.olcms.com/fullchain.pem;</span><br><span class="line">                ssl_certificate_key /etc/letsencrypt/live/webrtc.olcms.com/privkey.pem;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="编写turn-php文件和iceconfig-php文件，并把文件放到目录-var-www-html-目录下"><a href="#编写turn-php文件和iceconfig-php文件，并把文件放到目录-var-www-html-目录下" class="headerlink" title="编写turn.php文件和iceconfig.php文件，并把文件放到目录/var/www/html/目录下"></a>编写turn.php文件和iceconfig.php文件，并把文件放到目录/var/www/html/目录下</h4><p>turn.php文件内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">           $request_username = $_GET[<span class="string">"username"</span>];  </span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">empty</span>($request_username)) &#123;  </span><br><span class="line">               <span class="keyword">echo</span> <span class="string">"username == null"</span>;  </span><br><span class="line">               <span class="keyword">exit</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">           $request_key = $_GET[<span class="string">"key"</span>];  </span><br><span class="line">           $time_to_live = <span class="number">600</span>;  </span><br><span class="line">           $timestamp = time() + $time_to_live;<span class="comment">//失效时间  </span></span><br><span class="line">           $response_username = $timestamp.<span class="string">":"</span>.$_GET[<span class="string">"username"</span>];  </span><br><span class="line">           $response_key = $request_key;  </span><br><span class="line">           <span class="keyword">if</span>(<span class="keyword">empty</span>($response_key))  </span><br><span class="line">           $response_key = <span class="string">"code_key"</span>; <span class="comment">//constants.py中CEOD_KEY  </span></span><br><span class="line"></span><br><span class="line">           $response_password = getSignature($response_username, $response_key);  </span><br><span class="line"></span><br><span class="line">           $jsonObj = <span class="keyword">new</span> Response();  </span><br><span class="line">           $jsonObj-&gt;username = $response_username;  </span><br><span class="line">           $jsonObj-&gt;password = $response_password;  </span><br><span class="line">           $jsonObj-&gt;ttl = <span class="number">86400</span>;</span><br><span class="line">           <span class="comment">//此处需配置自己的服务器</span></span><br><span class="line">           $jsonObj-&gt;uris= <span class="keyword">array</span>(<span class="string">"stun:webrtc.olcms.com:3478"</span>,<span class="string">"turn:webrtc.olcms.com:3478?transport=udp"</span>,<span class="string">"turn:webrtc.olcms.com?transport=tcp"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">echo</span> json_encode($jsonObj);  </span><br><span class="line"></span><br><span class="line">       <span class="comment">/**   </span></span><br><span class="line"><span class="comment">        * 使用HMAC-SHA1算法生成签名值   </span></span><br><span class="line"><span class="comment">        *   </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> $str 源串   </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> $key 密钥   </span></span><br><span class="line"><span class="comment">        *   </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> 签名值   </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">function</span> <span class="title">getSignature</span><span class="params">($str, $key)</span> </span>&#123;</span><br><span class="line">       $signature = <span class="string">""</span>;</span><br><span class="line">       <span class="keyword">if</span> (function_exists(<span class="string">'hash_hmac'</span>)) &#123;</span><br><span class="line">       $signature = base64_encode(hash_hmac(<span class="string">"sha1"</span>, $str, $key, <span class="keyword">true</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       $blocksize = <span class="number">64</span>;</span><br><span class="line">       $hashfunc = <span class="string">'sha1'</span>;</span><br><span class="line">       <span class="keyword">if</span> (strlen($key) &gt; $blocksize) &#123;</span><br><span class="line">       $key = pack(<span class="string">'H*'</span>, $hashfunc($key));</span><br><span class="line">       &#125;</span><br><span class="line">       $key = str_pad($key, $blocksize, chr(<span class="number">0x00</span>));</span><br><span class="line">       $ipad = str_repeat(chr(<span class="number">0x36</span>), $blocksize);</span><br><span class="line">       $opad = str_repeat(chr(<span class="number">0x5c</span>), $blocksize);</span><br><span class="line">       $hmac = pack(</span><br><span class="line">       <span class="string">'H*'</span>, $hashfunc(</span><br><span class="line">       ($key ^ $opad) . pack(</span><br><span class="line">       <span class="string">'H*'</span>, $hashfunc(</span><br><span class="line">       ($key ^ $ipad) . $str</span><br><span class="line">       )</span><br><span class="line">       )</span><br><span class="line">       )</span><br><span class="line">       );</span><br><span class="line">       $signature = base64_encode($hmac);</span><br><span class="line">       &#125;</span><br><span class="line">           <span class="keyword">return</span> $signature;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;  </span><br><span class="line">               <span class="keyword">public</span> $username = <span class="string">""</span>;  </span><br><span class="line">               <span class="keyword">public</span> $password = <span class="string">""</span>;  </span><br><span class="line">               <span class="keyword">public</span> $ttl = <span class="string">""</span>;  </span><br><span class="line">               <span class="keyword">public</span> $uris = <span class="keyword">array</span>(<span class="string">""</span>);  </span><br><span class="line">           &#125;  </span><br><span class="line"></span><br><span class="line">       <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>iceconfig.php文件内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">            $request_username = <span class="string">"inesadt"</span>;  <span class="comment">//配置成自己的turn服务器用户名</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>($request_username)) &#123;  </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"username == null"</span>;  </span><br><span class="line">                <span class="keyword">exit</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            $request_key = <span class="string">"inesadt"</span>;  <span class="comment">//配置成自己的turn服务器密码</span></span><br><span class="line">            $time_to_live = <span class="number">600</span>;  </span><br><span class="line">            $timestamp = time() + $time_to_live;<span class="comment">//失效时间  </span></span><br><span class="line">            $response_username = $timestamp.<span class="string">":"</span>.$_GET[<span class="string">"username"</span>];  </span><br><span class="line">            $response_key = $request_key;  </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>($response_key))  </span><br><span class="line">            $response_key = <span class="string">"CEOD_KEY"</span>;<span class="comment">//constants.py中CEOD_KEY  </span></span><br><span class="line"></span><br><span class="line">            $response_password = getSignature($response_username, $response_key);  </span><br><span class="line"></span><br><span class="line">            $arrayObj = <span class="keyword">array</span>();</span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'username'</span>] = $response_username;</span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'credential'</span>] = $response_password;</span><br><span class="line">            <span class="comment">//配置成自己的stun/turn服务器</span></span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'urls'</span>][<span class="number">0</span>] = <span class="string">"stun:webrtc.olcms.com:3478"</span>;</span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'urls'</span>][<span class="number">1</span>] = <span class="string">"turn:webrtc.olcms.com:3478?transport=tcp"</span>;</span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'uris'</span>][<span class="number">0</span>] = <span class="string">"stun:webrtc.olcms.com:3478"</span>;</span><br><span class="line">            $arrayObj[<span class="number">0</span>][<span class="string">'uris'</span>][<span class="number">1</span>] = <span class="string">"turn:webrtc.olcms.com:3478?transport=tcp"</span>;</span><br><span class="line">            $jsonObj = <span class="keyword">new</span> Response();  </span><br><span class="line">            $jsonObj-&gt;lifetimeDuration = <span class="string">"300.000s"</span>;</span><br><span class="line">            $jsonObj-&gt;iceServers = $arrayObj;</span><br><span class="line">            <span class="keyword">echo</span> json_encode($jsonObj);  </span><br><span class="line"></span><br><span class="line">            <span class="comment">/**   </span></span><br><span class="line"><span class="comment">            * 使用HMAC-SHA1算法生成签名值   </span></span><br><span class="line"><span class="comment">            *   </span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> $str 源串   </span></span><br><span class="line"><span class="comment">            * <span class="doctag">@param</span> $key 密钥   </span></span><br><span class="line"><span class="comment">            *   </span></span><br><span class="line"><span class="comment">            * <span class="doctag">@return</span> 签名值   </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">getSignature</span><span class="params">($str, $key)</span> </span>&#123;</span><br><span class="line">                $signature = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (function_exists(<span class="string">'hash_hmac'</span>)) &#123;</span><br><span class="line">                    $signature = base64_encode(hash_hmac(<span class="string">"sha1"</span>, $str, $key, <span class="keyword">true</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $blocksize = <span class="number">64</span>;</span><br><span class="line">                    hashfunc = <span class="string">'sha1'</span>;</span><br><span class="line">                    <span class="keyword">if</span> (strlen($key) &gt; $blocksize) &#123;</span><br><span class="line">                        $key = pack(<span class="string">'H*'</span>, $hashfunc($key));</span><br><span class="line">                    &#125;</span><br><span class="line">                    $key = str_pad($key, $blocksize, chr(<span class="number">0x00</span>));</span><br><span class="line">                    $ipad = str_repeat(chr(<span class="number">0x36</span>), $blocksize);</span><br><span class="line">                    $opad = str_repeat(chr(<span class="number">0x5c</span>), $blocksize);</span><br><span class="line">                    $hmac = pack(    </span><br><span class="line">                    <span class="string">'H*'</span>, $hashfunc(    </span><br><span class="line">                            ($key ^ $opad) . pack(    </span><br><span class="line">                                    <span class="string">'H*'</span>, $hashfunc(    </span><br><span class="line">                                            ($key ^ $ipad) . $str    </span><br><span class="line">                                   )    </span><br><span class="line">                            )    </span><br><span class="line">                        )    </span><br><span class="line">                    ); </span><br><span class="line">                    $signature = base64_encode($hmac);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> $signature;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">public</span> $lifetimeDuration = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">public</span> $iceServers = <span class="keyword">array</span>(<span class="string">""</span>);</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="重启Nginx服务器和php7-0-fpm-（未使用）"><a href="#重启Nginx服务器和php7-0-fpm-（未使用）" class="headerlink" title="重启Nginx服务器和php7.0-fpm （未使用）"></a>重启Nginx服务器和php7.0-fpm （未使用）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart </span><br><span class="line">service php7.0-fpm restart</span><br></pre></td></tr></table></figure><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><ol><li><p>可以使用curl命令测试该服务器，看返回是否正常。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST <span class="string">"http://apprtc.wanttosee.com:3033/v1alpha/iceconfig?key=4080218913"</span></span><br></pre></td></tr></table></figure></li><li><p>执行nginx时，报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"/usr/local/nginx/logs/nginx.pid"</span> failed (2: No such file or directory)</span><br></pre></td></tr></table></figure></li></ol><p>解决<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><ol start="3"><li>错误<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to start signaling: Failed to execute ‘pushState’ on ‘History’: A <span class="built_in">history</span> state object with URL ‘http://192.168.6.54/r/198676628’ cannot be created <span class="keyword">in</span> a document with origin ‘https://192.168.6.54’ and URL ‘https://192.168.6.54/</span><br></pre></td></tr></table></figure></li></ol><p>解决方法1：<br>房间服务器编译完成后，在/home/zhangkx/webrtc/apprtc/out/app_engine/js/apprtc.debug.js文件中找到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.pushState(&#123;‘roomId’: roomId, ‘roomLink’: roomLink&#125;, roomId, roomLink)</span><br></pre></td></tr></table></figure></p><p>，把这句话注释掉，重新运行即可。（如果重新编译，需要重新修改）<br>解决方法2：<br>在/home/zhangkx/webrtc/apprtc/src/web_app/js/appcontroller.js文件中找到<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.history.pushState(&#123;‘roomId’: roomId, ‘roomLink’: roomLink&#125;, roomId, roomLink)</span><br></pre></td></tr></table></figure></p><p>，把这句话注释掉，然后重新编译，重新运行房间服务器即可。</p><p>https带域名<br><a href="https://www.cnblogs.com/qcjd/p/9324877.html" target="_blank" rel="noopener">https://www.cnblogs.com/qcjd/p/9324877.html</a></p>]]></content:encoded>
      
      <comments>http://www.20864.com/webrtc-server.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>WebRTC国内镜像下载及编译</title>
      <link>http://www.20864.com/webrtc-build.html</link>
      <guid>http://www.20864.com/webrtc-build.html</guid>
      <pubDate>Fri, 15 May 2020 06:39:25 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;直接下载WebRTC源码，需要翻墙，使用VPN还不好使，需要自己架VPS。&lt;br&gt;这里使用了Agora.io声网提供的WebRTC国内镜像源，无需翻墙，可以代替Google官方版本。（只读）&lt;br&gt;2019年5月发布，来源：&lt;a href=&quot;https://chromium.googlesource.com/external/webrtc/+/refs/heads/master&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://chromium.googlesource.com/external/webrtc/+/refs/heads/master&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>直接下载WebRTC源码，需要翻墙，使用VPN还不好使，需要自己架VPS。<br>这里使用了Agora.io声网提供的WebRTC国内镜像源，无需翻墙，可以代替Google官方版本。（只读）<br>2019年5月发布，来源：<a href="https://chromium.googlesource.com/external/webrtc/+/refs/heads/master" target="_blank" rel="noopener">https://chromium.googlesource.com/external/webrtc/+/refs/heads/master</a></p><a id="more"></a><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><p>使用VM虚拟机搭建ubuntu环境编译，源码、第三方库、依赖文件等，占到20G以上，再加上编译，虚拟机至少要配个50G的存储空间。<br>最佳编译环境是linux，win10上也能编译，mac上编译据说会遇到问题，未尝试过。<br>使用系统：Ubuntu 16.04.6 LTS (Xenial Xerus)<br><a href="http://releases.ubuntu.com/16.04/ubuntu-16.04.6-desktop-amd64.iso" target="_blank" rel="noopener">http://releases.ubuntu.com/16.04/ubuntu-16.04.6-desktop-amd64.iso</a><br>Python：2.7(ubuntu16自带，注意不能使用3以上版本)<br>git</p><h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h2><p>运行以下脚本，替换 git 源<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"&lt;your email&gt;"</span></span><br><span class="line">git config --global user.name <span class="string">"&lt;your name&gt;"</span></span><br><span class="line"></span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/webrtc.git.insteadOf https://chromium.googlesource.com/external/webrtc.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/base.git.insteadOf https://chromium.googlesource.com/chromium/src/base</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/build.git.insteadOf https://chromium.googlesource.com/chromium/src/build</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/buildtools.git.insteadOf https://chromium.googlesource.com/chromium/src/buildtools</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/gradle.git.insteadOf https://chromium.googlesource.com/external/github.com/gradle/gradle.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/ios.git.insteadOf https://chromium.googlesource.com/chromium/src/ios.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/testing.git.insteadOf https://chromium.googlesource.com/chromium/src/testing</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/third_party.git.insteadOf https://chromium.googlesource.com/chromium/src/third_party</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/clang-format.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/cfe/tools/clang-format.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libcxx.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/libcxx.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libcxxabi.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/libcxxabi.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libunwind.git.insteadOf https://chromium.googlesource.com/external/llvm.org/libunwind.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/android_ndk.git.insteadOf https://chromium.googlesource.com/android_ndk.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/android_tools.git.insteadOf https://chromium.googlesource.com/android_tools.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/auto.git.insteadOf https://chromium.googlesource.com/external/github.com/google/auto.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/catapult.git.insteadOf https://chromium.googlesource.com/catapult.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/compact_enc_det.git.insteadOf https://chromium.googlesource.com/external/github.com/google/compact_enc_det.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/colorama.git.insteadOf https://chromium.googlesource.com/external/colorama.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/depot_tools.git.insteadOf https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/errorprone.git.insteadOf https://chromium.googlesource.com/chromium/third_party/errorprone.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/ffmpeg.git.insteadOf https://chromium.googlesource.com/chromium/third_party/ffmpeg.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/findbugs.git.insteadOf https://chromium.googlesource.com/chromium/deps/findbugs.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/freetype2.git.insteadOf https://chromium.googlesource.com/chromium/src/third_party/freetype2.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/harfbuzz.git.insteadOf https://chromium.googlesource.com/external/github.com/harfbuzz/harfbuzz.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/gtest-parallel.git.insteadOf https://chromium.googlesource.com/external/github.com/google/gtest-parallel</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/googletest.git.insteadOf https://chromium.googlesource.com/external/github.com/google/googletest.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/icu.git.insteadOf https://chromium.googlesource.com/chromium/deps/icu.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/jsr-305.git.insteadOf https://chromium.googlesource.com/external/jsr-305.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/jsoncpp.git.insteadOf https://chromium.googlesource.com/external/github.com/open-source-parsers/jsoncpp.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/junit.git.insteadOf https://chromium.googlesource.com/external/junit.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/fuzzer.git.insteadOf https://chromium.googlesource.com/chromium/llvm-project/compiler-rt/lib/fuzzer.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libjpeg_turbo.git.insteadOf https://chromium.googlesource.com/chromium/deps/libjpeg_turbo.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libsrtp.git.insteadOf https://chromium.googlesource.com/chromium/deps/libsrtp.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libvpx.git.insteadOf https://chromium.googlesource.com/webm/libvpx.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/libyuv.git.insteadOf https://chromium.googlesource.com/libyuv/libyuv.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/linux-syscall-support.git.insteadOf https://chromium.googlesource.com/linux-syscall-support.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/mockito.git.insteadOf https://chromium.googlesource.com/external/mockito/mockito.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/nasm.git.insteadOf https://chromium.googlesource.com/chromium/deps/nasm.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/openh264.git.insteadOf https://chromium.googlesource.com/external/github.com/cisco/openh264</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/requests.git.insteadOf https://chromium.googlesource.com/external/github.com/kennethreitz/requests.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/robolectric.git.insteadOf https://chromium.googlesource.com/external/robolectric.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/ub-uiautomator.git.insteadOf https://chromium.googlesource.com/chromium/third_party/ub-uiautomator.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/usrsctp.git.insteadOf https://chromium.googlesource.com/external/github.com/sctplab/usrsctp</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/binaries.git.insteadOf https://chromium.googlesource.com/chromium/deps/yasm/binaries.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/patched-yasm.git.insteadOf https://chromium.googlesource.com/chromium/deps/yasm/patched-yasm.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/tools.git.insteadOf https://chromium.googlesource.com/chromium/src/tools</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/client-py.git.insteadOf https://chromium.googlesource.com/infra/luci/client-py.git</span><br><span class="line">git config --global url.http://120.92.49.206:3232/chromiumsrc/boringssl.git.insteadOf https://boringssl.googlesource.com/boringssl.git</span><br></pre></td></tr></table></figure></p><h2 id="指定同步目录"><a href="#指定同步目录" class="headerlink" title="指定同步目录"></a>指定同步目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定当前目录为同步目录，也可以指定其他路径</span></span><br><span class="line"><span class="built_in">export</span> WORKSPACE=`<span class="built_in">pwd</span>`</span><br></pre></td></tr></table></figure><h2 id="安装depot-tools"><a href="#安装depot-tools" class="headerlink" title="安装depot_tools"></a>安装depot_tools</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line">rm -rf depot_tools &amp;&amp; git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/depot_tools &amp;&amp; git checkout gitlab</span><br><span class="line">chmod +x <span class="variable">$WORKSPACE</span>/depot_tools/cipd</span><br><span class="line"> </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$WORKSPACE</span>/depot_tools</span><br></pre></td></tr></table></figure><h2 id="同步WebRTC"><a href="#同步WebRTC" class="headerlink" title="同步WebRTC"></a>同步WebRTC</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rm -rf <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; mkdir <span class="variable">$WORKSPACE</span>/webrtc</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab</span><br><span class="line"> </span><br><span class="line"><span class="built_in">export</span> CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clang</span><br><span class="line"> </span><br><span class="line"><span class="comment">#cd ~/depot_tools; git fetch; git reset --hard origin/gitlab; chmod +x ~/depot_tools/cipd</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab</span><br></pre></td></tr></table></figure><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h2><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install -y g++</span><br><span class="line"> </span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$WORKSPACE</span>/depot_tools</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc/src</span><br><span class="line"> </span><br><span class="line">./build/install-build-deps.sh</span><br><span class="line"> </span><br><span class="line">gn gen out/Release <span class="string">"--args=is_debug=false"</span></span><br><span class="line"> </span><br><span class="line">ninja -C out/Release</span><br></pre></td></tr></table></figure><h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">apt-get install -y software-properties-common</span><br><span class="line">add-apt-repository -y ppa:openjdk-r/ppa</span><br><span class="line"> </span><br><span class="line">./build/install-build-deps-android.sh</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加安卓平台</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"target_os = [ 'android' ]"</span> &gt;&gt;.gclient</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 同步</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$WORKSPACE</span>/depot_tools</span><br><span class="line"><span class="built_in">export</span> CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clang</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc/src</span><br><span class="line"> </span><br><span class="line">gn gen android/Release <span class="string">"--args=is_debug=false target_os=\"android\" target_cpu=\"arm64\""</span></span><br><span class="line"> </span><br><span class="line">ninja -C android/Release</span><br></pre></td></tr></table></figure><h4 id="iOS-macOS"><a href="#iOS-macOS" class="headerlink" title="iOS/macOS"></a>iOS/macOS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$WORKSPACE</span>/depot_tools</span><br><span class="line"> </span><br><span class="line"><span class="built_in">export</span> CDS_CLANG_BUCKET_OVERRIDE=https://chromiumsrc.gitlab.io/commondatastorage/chromium-browser-clang</span><br><span class="line">git.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 安装depot_tools</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line">rm -rf depot_tools &amp;&amp; git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/depot_tools &amp;&amp; git checkout gitlab</span><br><span class="line">chmod +x <span class="variable">$WORKSPACE</span>/depot_tools/cipd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span></span><br><span class="line">rm -rf <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; mkdir <span class="variable">$WORKSPACE</span>/webrtc</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; \</span><br><span class="line">gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc &amp;&amp; \</span><br><span class="line">gclient sync\</span><br><span class="line"> --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc/src &amp;&amp; \</span><br><span class="line">gn gen out/Release <span class="string">"--args=is_debug=false"</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WORKSPACE</span>/webrtc/src &amp;&amp; \</span><br><span class="line">ninja -C out/Release</span><br></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">1. git - https://git-scm.com/download/win</span><br><span class="line"> </span><br><span class="line">2. visualstudio2017community - https://download.visualstudio.microsoft.com/download/pr/aaebc214-bc67-4137-9bea-04fcb0c90720/2e18f27594472d0c7515d9cbe237bd56/vs_community.exe</span><br><span class="line">&gt; 2.1 Modify <span class="string">"Windows Software Development Kit"</span> &gt; +Debugging Tools <span class="keyword">for</span> Windows</span><br><span class="line"> </span><br><span class="line">3. python2 - https://www.python.org/downloads/release/python-2716/</span><br><span class="line">&gt; 3.1 pip install pywin32</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置</span></span><br><span class="line">1. 执行git.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment">#安装depot_tools</span></span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE%</span><br><span class="line">rd /s /q depot_tools webrtc &amp; git <span class="built_in">clone</span> https://chromium.googlesource.com/chromium/tools/depot_tools.git -b gitlab</span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line"><span class="built_in">set</span> PATH=%PATH%;%USERPROFILE%\depot_tools</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE% &amp;&amp; ^</span><br><span class="line">rd /s /q webrtc &amp; mkdir webrtc</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE%\webrtc &amp;&amp; ^</span><br><span class="line">gclient config --name src https://chromium.googlesource.com/external/webrtc.git@gitlab</span><br><span class="line"> </span><br><span class="line"><span class="comment">#同步</span></span><br><span class="line"><span class="built_in">set</span> CDS_CLANG_BUCKET_OVERRIDE=http://120.92.49.206:3232/chromiumsrc/commondatastorage/raw/master/public/chromium-browser-clang</span><br><span class="line"><span class="built_in">set</span> DEPOT_TOOLS_WIN_TOOLCHAIN=0</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE%\webrtc &amp;&amp; ^</span><br><span class="line">gclient sync --patch-ref=https://chromium.googlesource.com/chromium/src/build.git@gitlab</span><br><span class="line"> </span><br><span class="line"><span class="comment">#生成</span></span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE%\webrtc\src &amp;&amp;&amp; ^</span><br><span class="line">gn gen out/Release <span class="string">"--args=is_debug=false"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line"><span class="built_in">cd</span> %USERPROFILE%\webrtc\src &amp;&amp; ^</span><br><span class="line">ninja -C out/Release</span><br></pre></td></tr></table></figure><h4 id="如果遇到不能下载，请检查是否设置了不可用代理，或者限制了端口。"><a href="#如果遇到不能下载，请检查是否设置了不可用代理，或者限制了端口。" class="headerlink" title="如果遇到不能下载，请检查是否设置了不可用代理，或者限制了端口。"></a>如果遇到不能下载，请检查是否设置了不可用代理，或者限制了端口。</h4><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>WebRTC开发者社区： <a href="https://rtcdeveloper.com/t/topic/14914" target="_blank" rel="noopener">https://rtcdeveloper.com/t/topic/14914</a><br>声网镜像地址： <a href="https://webrtc.org.cn/mirror/" target="_blank" rel="noopener">https://webrtc.org.cn/mirror/</a></p>]]></content:encoded>
      
      <comments>http://www.20864.com/webrtc-build.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>畅言去广告代码</title>
      <link>http://www.20864.com/changyanquguanggao.html</link>
      <guid>http://www.20864.com/changyanquguanggao.html</guid>
      <pubDate>Wed, 16 Jan 2019 05:52:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;博客重新翻新了一番，放了一段时间后，正准备启用，结果发现使用第三方的评论系统搜狐畅言，竟然有广告了，而且还是很恶心的评论框下方广告和网页右下角广告都有。看了一下去广告价格，惹不起惹不起。&lt;/p&gt;
&lt;p&gt;由于博客挂在Github上，没有独立的服务器，然后其他的第三方评论系统关的关，墙的墙，没什么比较好的可以用。所以畅言用还是要用的，广告也还是要去的。 &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>博客重新翻新了一番，放了一段时间后，正准备启用，结果发现使用第三方的评论系统搜狐畅言，竟然有广告了，而且还是很恶心的评论框下方广告和网页右下角广告都有。看了一下去广告价格，惹不起惹不起。</p><p>由于博客挂在Github上，没有独立的服务器，然后其他的第三方评论系统关的关，墙的墙，没什么比较好的可以用。所以畅言用还是要用的，广告也还是要去的。 </p><a id="more"></a><p>网上搜罗加自己分析了一下，有如下代码可用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 畅言评论广告隐藏 */</span></span><br><span class="line"><span class="selector-id">#feedAv</span>&#123; <span class="attribute">margin-top</span>: -<span class="number">250px</span><span class="meta">!important</span>;<span class="attribute">transform</span>: <span class="built_in">scale</span>(0);&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 畅言右下角广告隐藏 */</span></span><br><span class="line"><span class="selector-id">#pop_ad</span>&#123; <span class="attribute">margin-top</span>: -<span class="number">250px</span><span class="meta">!important</span>;<span class="attribute">transform</span>: <span class="built_in">scale</span>(0);&#125;</span><br></pre></td></tr></table></figure><pre><code class="css"><span class="comment">/* 评论框美化 */</span>  <span class="selector-class">.module-cmt-box</span>{<span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">16px</span><span class="meta">!important</span>;}<span class="selector-class">.header-login</span>{<span class="attribute">left</span>: <span class="number">746px</span><span class="meta">!important</span>;<span class="attribute">border</span>: <span class="number">0</span><span class="meta">!important</span>;<span class="attribute">border-radius</span>: <span class="number">0</span><span class="meta">!important</span>;}<span class="selector-class">.post-wrap-border-t-r</span>,<span class="selector-class">.post-wrap-border-t-l</span>,<span class="selector-class">.post-wrap-border-r</span>,<span class="selector-class">.post-wrap-border-l</span>{<span class="attribute">display</span>:none;}<span class="selector-class">.post-wrap-main</span>{<span class="attribute">border</span>:<span class="number">0</span><span class="meta">!important</span>;}<span class="selector-class">.post-wrap-w</span>{<span class="attribute">background</span>:<span class="number">#f0f0f0</span>;<span class="attribute">border-radius</span>:<span class="number">5px</span>;<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0,0,0,.2)}.btn-fw{background:#5fb878 url(https://static.krnet.cc/skin/images/release.svg)center no-repeat !important;width:60px !important; height:60px !important;border-radius:70px;important;margin-top:-5px!important;margin-right:40px!important;background-size:30px !important;box-shadow: 0 2px 6px rgba(0,0,0,.2);-webkit-transition:.3s;transition:.3s}<span class="selector-class">.btn-fw</span><span class="selector-pseudo">:hover</span>{<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,.2);}<span class="selector-class">.block-head-w</span>{<span class="attribute">margin-top</span>:-<span class="number">20px</span> <span class="meta">!important</span>;}<span class="selector-class">.section-service-w</span>{<span class="attribute">height</span>: <span class="number">0px</span>;<span class="attribute">opacity</span>: <span class="number">0</span>;}<span class="selector-class">.head-img-w</span>{<span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;}<span class="selector-class">.head-img-w</span> <span class="selector-tag">img</span>{<span class="attribute">width</span>:<span class="number">50px</span> <span class="meta">!important</span>;<span class="attribute">height</span>:<span class="number">50px</span> <span class="meta">!important</span>;}<span class="selector-class">.head-img-w</span>{<span class="attribute">top</span>:<span class="number">115px</span><span class="meta">!important</span>;<span class="attribute">left</span>:-<span class="number">0px</span><span class="meta">!important</span>;}<span class="selector-class">.wrap-action-gw</span>{<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid <span class="number">#dee4e9</span> <span class="meta">!important</span>;<span class="attribute">padding-top</span>:<span class="number">30px</span><span class="meta">!important</span>;}<span class="selector-class">.wrap-action-gw</span> <span class="selector-tag">span</span>,<span class="selector-class">.wrap-action-gw</span> <span class="selector-tag">i</span>,<span class="selector-class">.type-lists</span>,<span class="selector-class">.cmt-list-number</span>,<span class="selector-class">.title-name-gw-tag</span>,<span class="selector-class">.wrap-name-w</span>{<span class="attribute">display</span>:none<span class="meta">!important</span>;}<span class="selector-class">.cmt-list-type</span>{<span class="attribute">margin</span>:<span class="number">0</span><span class="meta">!important</span>;}<span class="selector-class">.build-floor-gw</span>{<span class="attribute">background</span>:<span class="number">#f0f0f0</span> <span class="meta">!important</span>}<span class="selector-class">.block-cont-gw</span>{<span class="attribute">padding</span>:<span class="number">20px</span> <span class="number">0</span> <span class="meta">!important</span>;<span class="attribute">border</span>:<span class="number">0</span> <span class="meta">!important</span>;}<span class="selector-class">.section-list-w</span>{<span class="attribute">width</span>:<span class="number">95%</span><span class="meta">!important</span>;<span class="attribute">margin-left</span>:<span class="number">2%</span><span class="meta">!important</span>;}</code></pre><p>使用方法：在<code>theme/source/css/_common/components/post/post.styl</code>中追加如上代码即可。<br>前面两个根据div的id，把广告显示隐藏掉。<br>最后一段是把评论框美化一下。美化后的效果：<br><img src="/changyanquguanggao/changyan.png">  </p><p>如果不想改变样式，只想去广告，就用上面两句就行了。<br>以上美化部分的代码摘自<a href="http://www.yeyulingfeng.com/2908.html" target="_blank" rel="noopener">夜雨聆风</a>。 </p>]]></content:encoded>
      
      <comments>http://www.20864.com/changyanquguanggao.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
